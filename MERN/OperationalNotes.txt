MongoDB Database (db) shell commands:

--------------------------------------------
***MySQL Database Schema == MongoDB Database (db)

Show all databases available on our current MongoDB server ------ show dbs
Show current database selected ------- db
Change to another database
Note: If the database you're trying to switch to does not exist, Mongo shell will create a new database and switch to it. ------- use DB_NAME
Delete database
Note: db.dropDatabase() will delete the current database in use. ---------- use DB_NAME >>>> db.dropDatabase()
-----------------------------------------
***SQL: Tables == MongoDB: Collections

View all collections in a MongoDB ------ show collections
Create a new collection in the current database ------ db.createCollection("COLLECTION_NAME")
Destroy a collection ------ db.COLLECTION_NAME.drop()

---------------------------------------------


***SQL: Row / Record == MongoDB: Document (JSON object)

----------------------------------------------------------------------
Let's create some CRUD operations

1) CREATE - Inserting a document into a collection:
// Pattern:
db.COLLECTION_NAME.insert({YOUR_JSON_DOCUMENT})  
 
// Example:
db.ninjas.insert({name: "Trey", belt: "black", status: "awesome"})

2) READ - Retrieving documents from a collection:
// Pattern: 
db.COLLECTION_NAME.find({YOUR_QUERY_DOCUMENT})

// Example:
db.ninjas.find({name: "Trey"}) ----- find by name
db.ninjas.find({})   ------ find all 
db.ninjas.find() --------find all
db.ninjas.find({_id: ObjectId("5462a78e514e258182f4c69a")})  ------- find by id

3) If you want to make the results look nicer and be easier to read:
db.ninjas.find().pretty()

4) DESTROY - Removing documents from a collection:
// Pattern:
db.COLLECTION_NAME.remove({YOUR_QUERY_DOCUMENT}, BOOLEAN)

// Example
db.ninjas.remove({belt: "yellow"})
db.ninjas.remove({belt: "yellow"}, false) // this query would have the same effect as the one above.

5) UPDATE - Updating documents in a collection:
// Pattern:
db.COLLECTION_NAME.update({QUERY}, {FIELDS_TO_UPDATE}, {OPTIONS})  
// Note: the options document is optional

// Example:
db.ninjas.update({name: "Trey"}, {location: "Mountain View"}) ---- to update it all
db.ninjas.update({name: "Trey"}, {$set: {location: "Mountain View"}}) ----- to add field or just update a cirtain field

-----------------------------------------------------------------------
Operators:

If I wanted to get all the Dojos whose number of students is greater than 15, I would run the following:
// Example:
db.dojos.find({number_of_students: {$gt: 15}})
db.students.find({lucky_number: {$gt: 3}})

Here is a chart of the most frequently-used operators (take some time to play around with them):
$gt (greater than) ------ 	Use to query selectively on numerical-valued fields
$gte (greater than or equal to) ----- Use to query selectively on numerical-valued fields
$lt (less than) ------ Use to query selectively on numerical-valued fields
$lte (less than or equal to) ----- Use to query selectively on numerical-valued fields
$in (in array) ----- Use to find documents who have a particular value within an array.


Operators with arrays
// Example:
db.students.update({_id: ObjectId("5463d871a6a96d5ed6252f4d")}, {$push: {interests: 'snowboarding'}})


Here are a couple common array update operators to get familiar with:
$push ------ Push to an array contained within a document.
$pop ------ Removes either the first or last element from an array. EX:db.COLLECTION.update({QUERY}, {$pop: {array_key: (1 or -1)}}) | Use 1 for the last item in the array, -1 for the first item.
$addToSet ------ It functions just like $push.  However, $addToSet only adds to the specified array if the value doesn't already exist (thereby preventing duplicate entries).
$pull ------ Removes a specified value from an array, unlike $pop, which removes by location. Ex:db.COLLECTION.update({QUERY}, {$pull: {array_key: VALUE}}) | This will remove all instances of VALUE from the documents with the array specified by the array_key that match QUERY.

----------------------------------------------------------------
1. Installing Mongoose

npm init -y
npm install mongoose express


2. Require Mongoose
const mongoose = require('mongoose');

3. Connecting to MongoDB with Mongoose


4. Create your Mongoose Schema and Model

----------------------------------------------------
Common Mongoose Commands

Defining a User Schema:

// Create a Schema for Users
const UserSchema = new mongoose.Schema({
 name: { type: String },
 age: { type: Number }
}, { timestamps: true })
// create a constructor function for our model and store in variable 'User'
const User = mongoose.model('User', UserSchema);
-------
Finding all Users:
// ...retrieve an array of all documents in the User collection
User.find()
    .then(users => {
        // logic with users results
    })
    .catch(err => res.json(err));
-----------
Finding all Users where their name is Jessica:
// ...retrieve an array of documents matching the query object criteria
User.find({name:'Jessica'}) 
    .then(usersNamedJessica => {
        // logic with usersNamedJessica results
    })
    .catch(err => res.json(err));
--------
Finding one User by _id:
// ...retrieve 1 document (the first record found) matching the query object criteria
User.findOne({_id: '5d34d361db64c9267ed91f73'})
    .then(user => {
        // logic with single user object result
    })
    .catch(err => res.json(err));
--------
Create a user:
 // ...create a new document to store in the User collection and save it to the DB.
const bob = new User(req.body);
// req.body is an object containing all the users data.
// if we look at req.body as an object literal it would look like this
	/*
     * req.body = {
     *		"name": "Bob Ross",
     *		"age": 42
     *	}
    **/
bob.save()
    .then(newUser => {
        // logic with succesfully saved newUser object
    })
    .catch(err => res.json(err));
 // If there's an error and the record was not saved, this (err) will contain validation errors.
--------
Create a user (simplified):
 // ...create a new document to store in the User collection and save it to the DB.
const { userData } = req.body;
User.create(userData)
    .then(newUser => {
        // logic with succesfully saved newUser object
    })
    .catch(err => res.json(err));
 // If there's an error and the record was not saved, this (err) will contain validation errors.
--------
Delete all users:
// ...delete all documents of the User collection
User.remove()
    .then(deletedUsers => {
        // logic (if any) with successfully removed deletedUsers object
    })
    .catch(err => res.json(err));
--------
Delete one user:
// ...delete 1 document that matches the query object criteria
User.remove({_id: '5d34d361db64c9267ed91f73'})
    .then(deletedUser => {
        // logic (if any) with successfully removed deletedUser object
    })
    .catch(err => res.json(err));
--------
Update one record
// ...update 1 document that matches the query object criteria
User.updateOne({name:'Bob Ross'}, {
    name: 'Ross Bob',
    $push: {pets: {name: 'Sprinkles', type: 'Chubby Unicorn' }}
})
    .then(result => {
        // logic with result -- note this will be the original object by default!
    })
    .catch(err => res.json(err));
------
Advanced Queries:
1)An alternative way to update a record:
User.findOne({name: 'Bob Ross'})
    .then(user => {
        user.name = 'Rob Boss';
        user.pets.push({name: 'Sprinkles', type: 'Chubby Unicorn'});
        return user.save();
    })
    .then(saveResult => res.json(saveResult))
    .catch(err => res.json(err));


2)Validate for uniqueness before creating new DB entry:
User.exists({name: req.body.name})
    .then(userExists => {
        if (userExists) {
            // Promise.reject() will activate the .catch() below.
            return Promise.reject('Error Message Goes Here');
        }
        return User.create(req.body);
    })
    .then(saveResult => res.json(saveResult))
    .catch(err => res.json(err));


